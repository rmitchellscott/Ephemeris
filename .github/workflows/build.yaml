name: build-docker

env:
  RMAPI_VERSION: v0.0.30-mitchell.1
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
      - 'v*.*'

jobs:
  build:
    name: Build ${{ matrix.variant }} Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant: [plain, rmapi]
        include:
          - variant: plain
            target: ephemeris
            build_args: ""
            skip_condition: ${{ contains(github.ref, 'rmapi') }}
          - variant: rmapi
            target: ephemeris-rmapi
            build_args: |
              RMAPI_VERSION=${{ env.RMAPI_VERSION }}
            skip_condition: false
    if: ${{ !matrix.skip_condition }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/rmitchellscott/ephemeris
          tags: |
            # Plain variant tags
            type=ref,event=branch,enable=${{ matrix.variant == 'plain' }}
            type=ref,event=tag,enable=${{ matrix.variant == 'plain' && !contains(github.ref, 'rmapi') }}
            type=semver,pattern={{version}},enable=${{ matrix.variant == 'plain' && !contains(github.ref, 'rmapi') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ matrix.variant == 'plain' && !contains(github.ref, 'rmapi') }}
            type=semver,pattern={{major}},enable=${{ matrix.variant == 'plain' && !contains(github.ref, 'rmapi') }}
            type=raw,priority=1000,value=latest,enable=${{ matrix.variant == 'plain' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rmapi') }}
            type=sha,enable=${{ matrix.variant == 'plain' }}

            # RMAPI variant tags - for regular tags, add rmapi suffix
            type=ref,event=tag,suffix=-rmapi${{ env.RMAPI_VERSION }},enable=${{ matrix.variant == 'rmapi' && !contains(github.ref, 'rmapi') }}
            type=semver,pattern={{version}},suffix=-rmapi${{ env.RMAPI_VERSION }},enable=${{ matrix.variant == 'rmapi' && !contains(github.ref, 'rmapi') }}
            type=semver,pattern={{major}}.{{minor}},suffix=-rmapi${{ env.RMAPI_VERSION }},enable=${{ matrix.variant == 'rmapi' && !contains(github.ref, 'rmapi') }}
            type=semver,pattern={{major}},suffix=-rmapi${{ env.RMAPI_VERSION }},enable=${{ matrix.variant == 'rmapi' && !contains(github.ref, 'rmapi') }}

            # RMAPI variant tags - for rmapi tags, use as-is
            type=ref,event=tag,enable=${{ matrix.variant == 'rmapi' && contains(github.ref, 'rmapi') }}
            type=semver,pattern={{version}},enable=${{ matrix.variant == 'rmapi' && contains(github.ref, 'rmapi') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ matrix.variant == 'rmapi' && contains(github.ref, 'rmapi') }}
            type=semver,pattern={{major}},enable=${{ matrix.variant == 'rmapi' && contains(github.ref, 'rmapi') }}

            # RMAPI variant branch and SHA tags
            type=ref,event=branch,suffix=-rmapi${{ env.RMAPI_VERSION }},enable=${{ matrix.variant == 'rmapi' }}
            type=sha,suffix=-rmapi${{ env.RMAPI_VERSION }},enable=${{ matrix.variant == 'rmapi' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push ${{ matrix.variant }} Image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: ${{ matrix.target }}
          build-args: ${{ matrix.build_args }}
          pull: true
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          platforms: linux/amd64,linux/arm64/v8
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
